
lbl52:	XOR AX, AX 
	INT 0x16 
	XOR AH, AH 
	FPUSH AX 
	NEXT
lbl53:	MOV DI, STRBUF 
	MOV BX, 128 
	XOR AX, AX 
CLEARSTART: 
	STOSB 
	DEC BX 
	OR BX, BX 
	JNZ CLEARSTART 
	NEXT
lbl54:	MOV DI, STRBUF 
	MOV SI, DI 
	MOV BX, 128 
PREPARESTART: 
	LODSB 
	OR AL, AL 
	JZ ENDPREPARE 
	CMP AL, ' ' 
	JNZ CASCADE1 
	XOR AL, AL 
CASCADE1: 
	CMP AL, 13 
	JNZ CASCADE2 
	XOR AL, AL 
CASCADE2: 
	CMP AL, 10 
	JNZ PREPARENEXT 
	XOR AL, AL 
PREPARENEXT: 
	STOSB 
	DEC BX 
	OR BX, BX 
	JNZ PREPARESTART 
ENDPREPARE: 
	NEXT
lbl55:	MOV AX, STRBUF 
	MOV [STR_DAT], AX 
	NEXT
lbl59:	CALL 0:lbl58
STARTSENTENCE: 
	CALL 0:lbl52
	CALL 0:lbl15
	CALL 0:lbl15
	CALL 0:lbl15
	FPOP AX 
	CMP AX, 8 
	JNZ SENTENCECONTINUE 
	CALL 0:lbl4
	FPOP AX 
	CMP AX, STRBUF 
	JNZ BACKSPACERESUME 
	CALL 0:lbl18
	CALL 0:lbl18
	CALL 0:lbl18
	JMP STARTSENTENCE 
BACKSPACERESUME: 
	CALL 0:lbl26
	CALL 0:lbl51
	CALL 0:lbl18
	CALL 0:lbl18
	MOV AX, 0 
	FPUSH AX 
	CALL 0:lbl56
	CALL 0:lbl57
	CALL 0:lbl56
	JMP STARTSENTENCE 
SENTENCECONTINUE: 
	CALL 0:lbl26
	CALL 0:lbl57
	FPOP AX 
	CMP AL, 13 
	JNZ STARTSENTENCE 
	MOV AX, 10 
	FPUSH AX 
	CALL 0:lbl26
	NEXT
lbl60:
KEYSTART: 
	CALL 0:lbl59
	MOV AX, STRBUF 
	FPUSH AX 
	CALL 0:lbl54
	CALL 0:lbl27
	JMP KEYSTART 
	NEXT
lbl61:	CALL 0:lbl54
	MOV SI, STRBUF+1 
	MOV DI, STRBUF 
	MOV CX, 127 
	MOV BX, 127 
	MOV DX, 0 
SHIFTSTART: 
	LODSB 
	STOSB 
	DEC CX 
	OR CX, CX 
	JNZ SHIFTSTART 
	MOV AL, byte [STRBUF] 
	OR AL, AL 
	JNZ SHIFTRESUME 
	MOV BX, 2 
	INC DX 
	CMP DX, 2 
	JE ENDSHIFT 
SHIFTRESUME: 
	DEC BX 
	OR BX, BX 
	JZ ENDSHIFT 
	MOV SI, STRBUF+1 
	MOV DI, STRBUF 
	MOV CX, 127 
	JMP SHIFTSTART 
ENDSHIFT: 
	NEXT
lbl62:
FPOP DI 
	FPOP SI 
TRANSFERSTART: 
	LODSB 
	STOSB 
	OR AL, AL 
	JNZ TRANSFERSTART 
	NEXT
lbl63:	MOV SI, STACK 
DUMPSTART: 
	LODSW 
	PUSH SI 
	FPUSH AX 
	CALL 0:lbl28
	CALL 0:lbl31
	POP SI 
	CMP SI, BP 
	JL DUMPSTART 
	CALL 0:lbl30
	NEXT
lbl64:
	MOV AX, ERRORSTR 
	FPUSH AX 
	CALL 0:lbl27
	NEXT 
ERRORSTR: db "ERROR",0 
	NEXT
lbl65:	CALL 0:lbl15
	CALL 0:lbl36
	FPOP AX 
	CMP AX, 4 
	JNZ NOTNUMBER 
%include "NUMBER.asm" 
NOTNUMBER: 
	CALL 0:lbl64
	NEXT
lbl66:	CALL 0:lbl32
	CALL 0:lbl2
	FPOP SI 
	LODSW 
	MOV [LISTSAVE], AX 
LISTSTART: 
	MOV AX, [LISTSAVE] 
	OR AX, AX 
	JZ ENDLIST 
	ADD AX, 2 
	FPUSH AX 
	CALL 0:lbl27
	CALL 0:lbl31
	MOV BX, [LISTSAVE] 
	MOV AX, [BX] 
	MOV [LISTSAVE], AX 
	JMP LISTSTART 
ENDLIST: 
	NEXT 
LISTSAVE: DW 0 
	NEXT
lbl67:	FPUSH AX 
	NEXT
lbl82:	MOV AX, FIXNAME 
	FPUSH AX 
	CALL 0:lbl34
	CALL 0:lbl35
	CALL 0:lbl78
	CALL 0:lbl71
	XOR AX, AX 
	FPUSH AX 
	CALL 0:lbl71
	NEXT 
FIXNAME: db "FIX", 0 
	NEXT
lbl83:	MOV AX, PROMPTSTR 
	FPUSH AX 
	CALL 0:lbl27
	NEXT 
PROMPTSTR: db "FORTH> ",0 
	NEXT
lbl84:	MOV AX, OKSTR 
	FPUSH AX 
	CALL 0:lbl27
	NEXT 
OKSTR: db " OK. ",0 
	NEXT
lbl86:
REPLSTART: 
	CALL 0:lbl85
REPLLOOP: 
	CALL 0:lbl55
	CALL 0:lbl54
	CALL 0:lbl4
	CALL 0:lbl34
	CALL 0:lbl15
	FPOP AX 
	OR AX, AX 
	JZ TRYEND 
	MOV AX, [LAST] 
	OR AX, AX 
	CALL 0:lbl35
	MOV AX, [STATEVAL] 
	OR AX, AX 
	JNZ COMPILEWORD 
	CALL 0:lbl37
	CALL 0:lbl61
	JMP REPLLOOP 
COMPILEWORD: 
	MOV AL, byte [STRBUF] 
	CMP AL, '$' 
	JNZ COMPILEWORDNEXT 
	CALL 0:lbl37
	CALL 0:lbl61
	JMP REPLLOOP 
COMPILEWORDNEXT: 
	CMP AL, ']' 
	JNZ COMPILEWORDFINISH 
	CALL 0:lbl50
	CALL 0:lbl18
	CALL 0:lbl61
	JMP REPLLOOP 
COMPILEWORDFINISH: 
	CALL 0:lbl78
	CALL 0:lbl71
	XOR AX, AX 
	FPUSH AX 
	CALL 0:lbl71
	CALL 0:lbl61
	JMP REPLLOOP 
TRYEND: 
	CALL 0:lbl18
	CALL 0:lbl55
	CALL 0:lbl4
	CALL 0:lbl36
	FPOP AX 
	OR AX, AX 
	JZ REPLEND 
	JMP TRYNUMBER 
TRYNUMBER: 
	MOV AX, BP 
	FPUSH AX 
	CALL 0:lbl43
	CALL 0:lbl4
	CALL 0:lbl65
	CALL 0:lbl44
	FPOP AX 
	CMP AX, BP 
	JZ REPLEND 
	MOV AX, [STATEVAL] 
	OR AX, AX 
	JZ TRYNUMNEXT 
	CALL 0:lbl76
	CALL 0:lbl71
	CALL 0:lbl82
TRYNUMNEXT: 
	CALL 0:lbl61
	JMP REPLLOOP 
REPLEND: 
	CALL 0:lbl84
	CALL 0:lbl30
	JMP REPLSTART 
ERRORLEVEL: dw 0 
STRNAME: db "FIX",0 
	NEXT
lbl87:
REPLLOOP1: 
	CALL 0:lbl55
	CALL 0:lbl54
	CALL 0:lbl4
	CALL 0:lbl34
	CALL 0:lbl15
	FPOP AX 
	OR AX, AX 
	JZ TRYEND1 
	MOV AX, [LAST] 
	OR AX, AX 
	CALL 0:lbl35
	MOV AX, [STATEVAL] 
	OR AX, AX 
	JNZ COMPILEWORD1 
	CALL 0:lbl37
	CALL 0:lbl61
	JMP REPLLOOP1 
COMPILEWORD1: 
	MOV AL, byte [STRBUF] 
	CMP AL, '$' 
	JNZ COMPILEWORDNEXT1 
	CALL 0:lbl37
	CALL 0:lbl61
	JMP REPLLOOP1 
COMPILEWORDNEXT1: 
	CMP AL, ']' 
	JNZ COMPILEWORDFINISH1 
	CALL 0:lbl50
	CALL 0:lbl18
	CALL 0:lbl61
	JMP REPLLOOP1 
COMPILEWORDFINISH1: 
	CALL 0:lbl78
	CALL 0:lbl71
	XOR AX, AX 
	FPUSH AX 
	CALL 0:lbl71
	CALL 0:lbl61
	JMP REPLLOOP1 
TRYEND1: 
	CALL 0:lbl18
	CALL 0:lbl55
	CALL 0:lbl4
	CALL 0:lbl36
	FPOP AX 
	OR AX, AX 
	JZ REPLEND1 
	JMP TRYNUMBER1 
TRYNUMBER1: 
	MOV AX, BP 
	FPUSH AX 
	CALL 0:lbl43
	CALL 0:lbl4
	CALL 0:lbl65
	CALL 0:lbl44
	FPOP AX 
	CMP AX, BP 
	JZ REPLEND1 
	MOV AX, [STATEVAL] 
	OR AX, AX 
	JZ TRYNUMNEXT1 
	CALL 0:lbl76
	CALL 0:lbl71
	CALL 0:lbl82
TRYNUMNEXT1: 
	CALL 0:lbl61
	JMP REPLLOOP1 
REPLEND1: 
	CALL 0:lbl84
	CALL 0:lbl30
	NEXT 
	NEXT

FLBL51:
	dw FLBL50
	db "BACKSPACE",0
lbl51:
	CALL 0:lbl31
	db PUSHVAL
	dw 8
	CALL 0:CPUSHF
	
	CALL 0:lbl26
	CALL 0:lbl31
	db PUSHVAL
	dw 8
	CALL 0:CPUSHF
	
	CALL 0:lbl26
	NEXT
FLBL52:
	dw FLBL51
	db "KEY",0
	CALL 0:lbl52
	NEXT
FLBL53:
	dw FLBL52
	db "CLEAR-STRING-BUFFER",0
	CALL 0:lbl53
	NEXT
FLBL54:
	dw FLBL53
	db "PREPARE-STRING-BUFFER",0
	CALL 0:lbl54
	NEXT
FLBL55:
	dw FLBL54
	db "STR<<",0
	CALL 0:lbl55
	NEXT
FLBL56:
	dw FLBL55
	db "STR<",0
lbl56:
	CALL 0:lbl1
	CALL 0:lbl41
	NEXT
FLBL57:
	dw FLBL56
	db "STR-WRITE",0
lbl57:
	CALL 0:lbl4
	CALL 0:lbl7
	CALL 0:lbl1
	CALL 0:lbl2
	db PUSHVAL
	dw 1
	CALL 0:CPUSHF
	
	CALL 0:lbl12
	CALL 0:lbl1
	CALL 0:lbl3
	NEXT
FLBL58:
	dw FLBL57
	db "RESET-STRING-BUFFER",0
lbl58:
	CALL 0:lbl53
	CALL 0:lbl55
	NEXT
FLBL59:
	dw FLBL58
	db "SENTENCE",0
	CALL 0:lbl59
	NEXT
FLBL60:
	dw FLBL59
	db "TESTKEY",0
	CALL 0:lbl60
	NEXT
FLBL61:
	dw FLBL60
	db "SHIFT-STRING-BUFFER",0
	CALL 0:lbl61
	NEXT
FLBL62:
	dw FLBL61
	db "TRANSFER-STRING",0
	CALL 0:lbl62
	NEXT
FLBL63:
	dw FLBL62
	db "DUMP",0
	CALL 0:lbl63
	NEXT
FLBL64:
	dw FLBL63
	db "ERROR",0
	CALL 0:lbl64
	NEXT
FLBL65:
	dw FLBL64
	db "NUMBER",0
	CALL 0:lbl65
	NEXT
FLBL66:
	dw FLBL65
	db "LIST-WORDS",0
	CALL 0:lbl66
	NEXT
FLBL67:
	dw FLBL66
	db "FIX",0
	CALL 0:lbl67
	NEXT
FLBL68:
	dw FLBL67
	db "TRY-NUMBER",0
lbl68:
	CALL 0:lbl4
	CALL 0:lbl65
	NEXT
FLBL69:
	dw FLBL68
	db "WORD",0
lbl69:
	CALL 0:lbl61
	CALL 0:lbl4
	NEXT
FLBL70:
	dw FLBL69
	db "'",0
lbl70:
	CALL 0:lbl69
	CALL 0:lbl34
	CALL 0:lbl35
	NEXT
FLBL71:
	dw FLBL70
	db ",",0
lbl71:
	CALL 0:lbl46
	NEXT
FLBL72:
	dw FLBL71
	db "B,",0
lbl72:
	CALL 0:lbl47
	NEXT
FLBL73:
	dw FLBL72
	db "CREATE",0
lbl73:
	CALL 0:lbl32
	CALL 0:lbl2
	CALL 0:lbl71
	CALL 0:lbl5
	db PUSHVAL
	dw 2
	CALL 0:CPUSHF
	
	CALL 0:lbl13
	CALL 0:lbl32
	CALL 0:lbl3
	CALL 0:lbl69
	CALL 0:lbl5
	CALL 0:lbl62
	CALL 0:lbl4
	CALL 0:lbl36
	CALL 0:lbl5
	CALL 0:lbl12
	db PUSHVAL
	dw 1
	CALL 0:CPUSHF
	
	CALL 0:lbl12
	CALL 0:lbl0
	CALL 0:lbl3
	NEXT
FLBL74:
	dw FLBL73
	db "RETURNVAL",0
lbl74:
	db PUSHVAL
	dw 203
	CALL 0:CPUSHF
	
	NEXT
FLBL75:
	dw FLBL74
	db "WRITERET",0
lbl75:
	CALL 0:lbl74
	CALL 0:lbl72
	NEXT
FLBL76:
	dw FLBL75
	db "WRITEPUSH",0
lbl76:
	CALL 0:lbl38
	CALL 0:lbl72
	NEXT
FLBL77:
	dw FLBL76
	db "CALLVAL",0
lbl77:
	db PUSHVAL
	dw 154
	CALL 0:CPUSHF
	
	NEXT
FLBL78:
	dw FLBL77
	db "WRITECALL",0
lbl78:
	db PUSHVAL
	dw 154
	CALL 0:CPUSHF
	
	CALL 0:lbl72
	NEXT
FLBL79:
	dw FLBL78
	db "PUSHWORD",0
lbl79:
	CALL 0:lbl76
	CALL 0:lbl70
	CALL 0:lbl71
	NEXT
FLBL80:
	dw FLBL79
	db "CALLWORD",0
lbl80:
	CALL 0:lbl78
	CALL 0:lbl70
	CALL 0:lbl71
	db PUSHVAL
	dw 0
	CALL 0:CPUSHF
	
	CALL 0:lbl71
	NEXT
FLBL81:
	dw FLBL80
	db "LAST?",0
lbl81:
	CALL 0:lbl32
	CALL 0:lbl2
	db PUSHVAL
	dw 2
	CALL 0:CPUSHF
	
	CALL 0:lbl12
	CALL 0:lbl27
	NEXT
FLBL82:
	dw FLBL81
	db "WRITEFIX",0
	CALL 0:lbl82
	NEXT
FLBL83:
	dw FLBL82
	db "PROMPT",0
	CALL 0:lbl83
	NEXT
FLBL84:
	dw FLBL83
	db "OK",0
	CALL 0:lbl84
	NEXT
FLBL85:
	dw FLBL84
	db "READ",0
lbl85:
	CALL 0:lbl83
	CALL 0:lbl58
	CALL 0:lbl59
	CALL 0:lbl55
	CALL 0:lbl54
	NEXT
FLBL86:
	dw FLBL85
	db "REPL",0
	CALL 0:lbl86
	NEXT
FLBL87:
	dw FLBL86
	db "EVAL",0
	CALL 0:lbl87
	NEXT
